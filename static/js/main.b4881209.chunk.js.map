{"version":3,"sources":["components/addTask/addTask.module.scss","components/task/task.module.scss","components/filters/filters.module.scss","components/taskList/taskList.module.scss","App.module.scss","redux/task/task.types.js","redux/task/task.action.js","components/addTask/addTask.js","redux/task/task.selectors.js","components/task/task.js","components/taskList/taskList.js","redux/filter/filter.types.js","components/filters/filters.js","redux/filter/filter.actions.js","App.js","redux/task/task.utils.js","redux/task/task.reducer.js","redux/filter/filter.reducer.js","redux/root-reducer.js","redux/store.js","serviceWorker.js","index.js","constants.js"],"names":["module","exports","taskActionTypes","nextTodoId","AddTask","props","handleSubmit","event","a","preventDefault","addTask","state","handleChange","target","value","name","setState","title","status","STATUS_FILTERS","NEW","priority","PRIORITY_FILTERS","HIGH","content","Container","Form","onSubmit","this","Row","Col","xs","Label","className","label","Control","type","placeholder","onChange","as","Object","keys","map","filterKey","style","marginBlock","rows","Button","onClick","button","Component","connect","task","payload","id","getTasksByStatus","createSelector","visibilityFilter","tasks","taskList","filter","IN_PROGRESS","FINISHED","getTasksByPriority","PRIORITIES","MEDIUM","LOW","sort","b","getVisibleTasks","deleteTask","Card","card","data-testid","Body","textAlign","display","Title","cardTitle","toUpperCase","Text","cardText","length","reduce","accumulator","currentValue","currentIndex","array","push","slice","Alert","variant","alert","Heading","filtersActionTypes","setStatusFilter","setPriorityFilter","e","App","addTaskToList","taskToAdd","removeTaskFromList","TaskIdToRemove","initialState","taskReducer","action","filterReducer","combineReducers","createStore","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4881209.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"addTask_label__fKj_G\",\"button\":\"addTask_button__oE1yH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"task_card__33yVI\",\"button\":\"task_button__1JTSt\",\"cardTitle\":\"task_cardTitle__glPBJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"filters_label__KrOPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"taskList_alert__2jPBi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2Olty\"};","export const taskActionTypes = {\n  ADD_TASK: \"ADD_TASK\",\n  DELETE_TASK: \"DELETE_TASK\",\n};\n","import { taskActionTypes } from \"./task.types\";\n\nlet nextTodoId = 0;\n\nexport const addTask = (task) => ({\n  type: taskActionTypes.ADD_TASK,\n  payload: {\n    id: ++nextTodoId,\n    ...task,\n  },\n});\n\nexport const deleteTask = (id) => ({\n  type: taskActionTypes.DELETE_TASK,\n  payload: id,\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTask } from \"../../redux/task/task.action\";\n\nimport { STATUS_FILTERS, PRIORITY_FILTERS } from \"../../constants\";\n\nimport { Form, Col, Button, Container } from \"react-bootstrap\";\n\nimport { label, button } from \"./addTask.module.scss\";\n\nexport class AddTask extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: \"\",\n      status: STATUS_FILTERS.NEW,\n      priority: PRIORITY_FILTERS.HIGH,\n      content: \"\",\n    };\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n\n    this.props.addTask(this.state);\n  };\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Row>\n            <Col xs={7}>\n              <Form.Label className={label}>TÍTULO</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Título\"\n                onChange={this.handleChange}\n                name=\"title\"\n              />\n            </Col>\n            <Col>\n              <Form.Label className={label}>ESTADO</Form.Label>\n              <Form.Control\n                as=\"select\"\n                onChange={this.handleChange}\n                name=\"status\"\n              >\n                {Object.keys(STATUS_FILTERS).map((filterKey) => (\n                  <option key={filterKey}>{STATUS_FILTERS[filterKey]}</option>\n                ))}\n              </Form.Control>\n            </Col>\n            <Col>\n              <Form.Label className={label}>PRIORIDAD</Form.Label>\n              <Form.Control\n                as=\"select\"\n                onChange={this.handleChange}\n                name=\"priority\"\n              >\n                {Object.keys(PRIORITY_FILTERS).map((filterKey) => (\n                  <option key={filterKey}>{PRIORITY_FILTERS[filterKey]}</option>\n                ))}\n              </Form.Control>\n            </Col>\n          </Form.Row>\n          <Form.Control\n            style={{ marginBlock: \"1%\" }}\n            placeholder=\"Descripción\"\n            as=\"textarea\"\n            rows={3}\n            name=\"content\"\n            onChange={this.handleChange}\n          />\n          <Form.Row>\n            <Button onClick={this.handleSubmit} className={button}>\n              Crear tarea\n            </Button>\n          </Form.Row>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nexport default connect(null, { addTask })(AddTask);\n","import { createSelector } from \"reselect\";\nimport { PRIORITY_FILTERS, STATUS_FILTERS } from \"../../constants\";\n\nconst getTasksList = (state) => state.tasks.taskList;\nconst getStatusFilter = (state) => state.visibilityFilter.status;\nconst getPriorityFilter = (state) => state.visibilityFilter.priority;\n\nexport const getTasksByStatus = createSelector(\n  [getStatusFilter, getTasksList],\n  (filter, tasks) => {\n    switch (filter) {\n      case STATUS_FILTERS.NEW: {\n        return tasks.filter((task) => task.status === STATUS_FILTERS.NEW);\n      }\n      case STATUS_FILTERS.IN_PROGRESS: {\n        return tasks.filter(\n          (task) => task.status === STATUS_FILTERS.IN_PROGRESS\n        );\n      }\n      case STATUS_FILTERS.FINISHED: {\n        return tasks.filter((task) => task.status === STATUS_FILTERS.FINISHED);\n      }\n      default: {\n        return tasks;\n      }\n    }\n  }\n);\n\nexport const getTasksByPriority = createSelector(\n  [getPriorityFilter, getTasksByStatus],\n  (filter, tasks) => {\n    const PRIORITIES = {\n      [PRIORITY_FILTERS.HIGH]: 1,\n      [PRIORITY_FILTERS.MEDIUM]: 2,\n      [PRIORITY_FILTERS.LOW]: 3,\n    };\n    switch (filter) {\n      case PRIORITY_FILTERS.HIGH: {\n        return [...tasks].sort((a, b) =>\n          PRIORITIES[a.priority] > PRIORITIES[b.priority] ? 1 : -1\n        );\n      }\n      case PRIORITY_FILTERS.MEDIUM: {\n        return [...tasks].sort((a, b) =>\n          PRIORITIES[a.priority] === 2 ? -1 : 1\n        );\n      }\n      case PRIORITY_FILTERS.LOW: {\n        return [...tasks].sort((a, b) =>\n          PRIORITIES[a.priority] < PRIORITIES[b.priority] ? 1 : -1\n        );\n      }\n      default: {\n        return tasks;\n      }\n    }\n  }\n);\n\nexport const getVisibleTasks = createSelector([getTasksByPriority], (tasks) => {\n  return tasks;\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteTask } from \"../../redux/task/task.action\";\n\nimport { Card, Button, Col, Row } from \"react-bootstrap\";\n\nimport { card, button, cardTitle, cardText } from \"./task.module.scss\";\n\nconst Task = ({ title, content, priority, status, deleteTask, id }) => {\n  return (\n    <Card className={card} data-testid=\"task-card\">\n      <Card.Body>\n        <Row style={{ textAlign: \"end\" }}>\n          <Col xs={8}></Col>\n          <Col>\n            <div style={{ display: \"inline-flex\" }}>\n              Estado:&ensp;<i>{status}</i>\n            </div>\n          </Col>\n          <Col>\n            <div style={{ display: \"inline-flex\" }}>\n              Prioridad:&ensp;<i>{priority}</i>\n            </div>\n          </Col>\n        </Row>\n        <Card.Title className={cardTitle}>\n          <strong>Titulo:&ensp;</strong>\n          {title.toUpperCase()}\n        </Card.Title>\n        <hr />\n        <Card.Text className={cardText}>\n          <strong>Descripción:&ensp;</strong>\n          {content}\n        </Card.Text>\n        <Button className={button} onClick={() => deleteTask(id)}>\n          ELIMINAR\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default connect(null, { deleteTask })(Task);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Container, Col, Row, Alert } from \"react-bootstrap\";\n\nimport { getVisibleTasks } from \"../../redux/task/task.selectors\";\n\nimport Task from \"../task/task\";\n\nimport { alert } from \"./taskList.module.scss\";\n\nconst TaskList = ({ tasks }) => {\n  return (\n    <Container>\n      {tasks.length > 0 ? (\n        tasks\n          .reduce(function (accumulator, currentValue, currentIndex, array) {\n            if (currentIndex % 2 === 0)\n              accumulator.push(array.slice(currentIndex, currentIndex + 2));\n            return accumulator;\n          }, [])\n          .map((task) => {\n            return (\n              <Row key={task[0].id}>\n                <Col>\n                  <Task\n                    id={task[0].id}\n                    title={task[0].title}\n                    content={task[0].content}\n                    status={task[0].status}\n                    priority={task[0].priority}\n                  />\n                </Col>\n                {task[1] ? (\n                  <Col>\n                    <Task\n                      id={task[1].id}\n                      title={task[1].title}\n                      content={task[1].content}\n                      status={task[1].status}\n                      priority={task[1].priority}\n                    />\n                  </Col>\n                ) : null}\n              </Row>\n            );\n          })\n      ) : (\n        <Alert variant=\"success\" className={alert} data-testid=\"alert\">\n          <Alert.Heading>NO HAY NINGUNA TAREA EN ESTA LISTA.</Alert.Heading>\n        </Alert>\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: getVisibleTasks(state),\n  };\n};\n\nexport default connect(mapStateToProps)(TaskList);\n","export const filtersActionTypes = {\n  SET_PRIORITY_FILTER: \"SET_PRIORITY_FILTER\",\n  SET_STATUS_FILTER: \"SET_STATUS_FILTER\",\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { STATUS_FILTERS, PRIORITY_FILTERS } from \"../../constants\";\n\nimport {\n  setPriorityFilter,\n  setStatusFilter,\n} from \"../../redux/filter/filter.actions\";\n\nimport { Form, Col, Container } from \"react-bootstrap\";\n\nimport { label } from \"./filters.module.scss\";\n\nconst Filters = ({ setPriorityFilter, setStatusFilter }) => {\n  const handleStatusFilter = (e) => {\n    const filter = e.target.value;\n    setStatusFilter(filter);\n  };\n\n  const handlePriorityFilter = (e) => {\n    const filter = e.target.value;\n    setPriorityFilter(filter);\n  };\n\n  return (\n    <Container style={{ marginBlock: \"1%\" }}>\n      <h2 className={label}>FILTRAR POR:</h2>\n      <Form.Row>\n        <Col>\n          <Form.Label className={label}>ESTADO</Form.Label>\n          <Form.Control\n            as=\"select\"\n            onChange={handleStatusFilter}\n            data-testid=\"select-status\"\n          >\n            {Object.keys(STATUS_FILTERS).map((filterKey) => (\n              <option key={filterKey}>{STATUS_FILTERS[filterKey]}</option>\n            ))}\n          </Form.Control>\n        </Col>\n        <Col>\n          <Form.Label className={label}>PRIORIDAD</Form.Label>\n          <Form.Control\n            as=\"select\"\n            onChange={handlePriorityFilter}\n            data-testid=\"select-priority\"\n          >\n            {Object.keys(PRIORITY_FILTERS).map((filterKey) => (\n              <option key={filterKey}>{PRIORITY_FILTERS[filterKey]}</option>\n            ))}\n          </Form.Control>\n        </Col>\n      </Form.Row>\n    </Container>\n  );\n};\n\nexport default connect(null, { setStatusFilter, setPriorityFilter })(Filters);\n","import { filtersActionTypes } from \"./filter.types\";\n\nexport const setPriorityFilter = (filter) => ({\n  type: filtersActionTypes.SET_PRIORITY_FILTER,\n  payload: filter,\n});\n\nexport const setStatusFilter = (filter) => ({\n  type: filtersActionTypes.SET_STATUS_FILTER,\n  payload: filter,\n});\n","import React from \"react\";\n\nimport AddTask from \"./components/addTask/addTask\";\nimport TaskList from \"./components/taskList/taskList\";\nimport Filters from \"./components/filters/filters\";\n\nimport { title } from \"./App.module.scss\";\n\nfunction App() {\n  return (\n    <div>\n      <h1 className={title}>TODO LIST</h1>\n      <AddTask />\n      <Filters />\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","export const addTaskToList = (taskList, taskToAdd) => {\n  return [...taskList, taskToAdd];\n};\n\nexport const removeTaskFromList = (taskList, TaskIdToRemove) => {\n  return taskList.filter((task) => task.id !== TaskIdToRemove);\n};\n","import { taskActionTypes } from \"./task.types\";\nimport { addTaskToList, removeTaskFromList } from \"./task.utils\";\n\nconst initialState = {\n  taskList: [],\n};\n\nconst taskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case taskActionTypes.ADD_TASK: {\n      return {\n        ...state,\n        taskList: addTaskToList(state.taskList, action.payload),\n      };\n    }\n    case taskActionTypes.DELETE_TASK: {\n      return {\n        ...state,\n        taskList: removeTaskFromList(state.taskList, action.payload),\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default taskReducer;\n","import { filtersActionTypes } from \"./filter.types\";\nimport { STATUS_FILTERS, PRIORITY_FILTERS } from \"../../constants\";\n\nconst initialState = {\n  status: STATUS_FILTERS.NEW,\n  priority: PRIORITY_FILTERS.HIGH,\n};\n\nconst filterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case filtersActionTypes.SET_PRIORITY_FILTER: {\n      return {\n        ...state,\n        priority: action.payload,\n      };\n    }\n    case filtersActionTypes.SET_STATUS_FILTER: {\n      return {\n        ...state,\n        status: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default filterReducer;\n","import { combineReducers } from \"redux\";\n\nimport tasks from \"./task/task.reducer\";\nimport visibilityFilter from \"./filter/filter.reducer\";\n\nexport default combineReducers({ tasks, visibilityFilter });\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"./root-reducer\";\n\nexport default createStore(rootReducer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const STATUS_FILTERS = {\n  NEW: \"Nuevo\",\n  IN_PROGRESS: \"En progreso\",\n  FINISHED: \"Finalizado\",\n};\n\nconst PRIORITY_FILTERS = {\n  HIGH: \"Alta\",\n  MEDIUM: \"Media\",\n  LOW: \"Baja\",\n};\n\nmodule.exports = {\n  STATUS_FILTERS,\n  PRIORITY_FILTERS,\n};\n"],"sourceRoot":""}